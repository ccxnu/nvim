{
  "nestjs-controller": {
    "prefix": "controllerall",
    "body": [
      "import { Controller, Get, Post, Body } from '@nestjs/common';",
      "",
      "@Controller('${1:route}')",
      "export class ${2:ControllerName}Controller",
      "{",
      "  @Get()",
      "  getAll()",
      "  {",
      "    ${0:// get logic here}",
      "  }",
      "",
      "  @Post()",
      "  create(@Body() body: any)",
      "  {",
      "    ${0:// post logic here}",
      "  }",
      "}"
    ],
    "description": "NestJS Controller with Allman style"
  },
  "nestjs-service": {
    "prefix": "serviceall",
    "body": [
      "import { Injectable } from '@nestjs/common';",
      "",
      "@Injectable()",
      "export class ${1:ServiceName}Service",
      "{",
      "  getAll()",
      "  {",
      "    ${0:// service logic here}",
      "  }",
      "",
      "  create(data: any)",
      "  {",
      "    ${0:// create logic here}",
      "  }",
      "}"
    ],
    "description": "NestJS Service with Allman style"
  },
  "nestjs-repository": {
    "prefix": "repoall",
    "body": [
      "import { Injectable } from '@nestjs/common';",
      "",
      "@Injectable()",
      "export class ${1:Repo}Repository implements ${1:repo}Repository",
      "{",
      "\tconstructor(private readonly database: Database)",
      "\t{}",
      "",
      "  async getAll()",
      "  {",
      "    ${0:// service logic here}",
      "  }",
      "}"
    ],
    "description": "NestJS Service with Allman style"
  },
  "nestjs-module": {
    "prefix": "moduleall",
    "body": [
      "import { Module } from '@nestjs/common';",
      "import { ${1:ServiceName}Service } from './${1:service}.service';",
      "import { ${2:ControllerName}Controller } from './${2:controller}.controller';",
      "",
      "@Module({",
      "  controllers: [${2:ControllerName}Controller],",
      "  providers: [${1:ServiceName}Service]",
      "})",
      "export class ${3:ModuleName}Module",
      "{}"
    ],
    "description": "NestJS Module with Allman style"
  },
  "nestjs-middleware": {
    "prefix": "middlewareall",
    "body": [
      "import { Injectable, NestMiddleware } from '@nestjs/common';",
      "import { Request, Response, NextFunction } from 'express';",
      "",
      "@Injectable()",
      "export class ${1:MiddlewareName}Middleware implements NestMiddleware",
      "{",
      "  use(req: Request, res: Response, next: NextFunction)",
      "  {",
      "    ${0:// middleware logic here}",
      "    next();",
      "  }",
      "}"
    ],
    "description": "NestJS Middleware with Allman style"
  },
  "nestjs-interceptor": {
    "prefix": "interceptorall",
    "body": [
      "import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';",
      "import { Observable } from 'rxjs';",
      "import { tap } from 'rxjs/operators';",
      "",
      "@Injectable()",
      "export class ${1:InterceptorName}Interceptor implements NestInterceptor",
      "{",
      "  intercept(context: ExecutionContext, next: CallHandler): Observable<any>",
      "  {",
      "    ${0:// interceptor logic here}",
      "    return next.handle().pipe(tap(() => console.log('After...')));",
      "  }",
      "}"
    ],
    "description": "NestJS Interceptor with Allman style"
  },
  "nestjs-guard": {
    "prefix": "guardall",
    "body": [
      "import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';",
      "import { Observable } from 'rxjs';",
      "",
      "@Injectable()",
      "export class ${1:GuardName}Guard implements CanActivate",
      "{",
      "  canActivate(context: ExecutionContext): boolean | Promise<boolean> | Observable<boolean>",
      "  {",
      "    ${0:// guard logic here}",
      "    return true;",
      "  }",
      "}"
    ],
    "description": "NestJS Guard with Allman style"
  },
  "nestjs-exception-filter": {
    "prefix": "exceptionfilterall",
    "body": [
      "import { ExceptionFilter, Catch, ArgumentsHost, HttpException } from '@nestjs/common';",
      "import { Request, Response } from 'express';",
      "",
      "@Catch(HttpException)",
      "export class ${1:ExceptionFilterName}Filter implements ExceptionFilter",
      "{",
      "  catch(exception: HttpException, host: ArgumentsHost)",
      "  {",
      "    const ctx = host.switchToHttp();",
      "    const response = ctx.getResponse<Response>();",
      "    const request = ctx.getRequest<Request>();",
      "    const status = exception.getStatus();",
      "",
      "    response.status(status).json({",
      "      statusCode: status,",
      "      timestamp: new Date().toISOString(),",
      "      path: request.url",
      "    });",
      "  }",
      "}"
    ],
    "description": "NestJS Exception Filter with Allman style"
  },
  "nestjs-pipe": {
    "prefix": "pipeall",
    "body": [
      "import { Injectable, PipeTransform, ArgumentMetadata, BadRequestException } from '@nestjs/common';",
      "",
      "@Injectable()",
      "export class ${1:PipeName}Pipe implements PipeTransform",
      "{",
      "  transform(value: any, metadata: ArgumentMetadata)",
      "  {",
      "    ${0:// pipe logic here}",
      "    if (!value) throw new BadRequestException('Validation failed');",
      "    return value;",
      "  }",
      "}"
    ],
    "description": "NestJS Pipe with Allman style"
  },
  "nestjs-decorator": {
    "prefix": "decoratorall",
    "body": [
      "import { createParamDecorator, ExecutionContext } from '@nestjs/common';",
      "",
      "export const ${1:DecoratorName} = createParamDecorator(",
      "  (data: unknown, ctx: ExecutionContext) =>",
      "  {",
      "    const request = ctx.switchToHttp().getRequest();",
      "    return request.${2:property};",
      "  },",
      ");"
    ],
    "description": "NestJS Custom Decorator with Allman style"
  },
  "Constructor": {
    "prefix": "ctor",
    "body": ["/**", " *", " */", "constructor()", "{", "\tsuper();", "\t$0", "}"],
    "description": "Constructor"
  },
  "Class Definition": {
    "prefix": "class",
    "body": ["class ${1:name}", "{", "\tconstructor(${2:parameters})", "\t{", "\t\t$0", "\t}", "}"],
    "description": "Class Definition"
  },
  "Interface Definition": {
    "prefix": "iface",
    "body": ["interface ${1:name}", "{", "\t$0", "}"],
    "description": "Interface Definition"
  },
  "Public Method Definition": {
    "prefix": "public method",
    "body": ["/**", " * ${1:name}", " */", "public ${1:name}()", "{", "\t$0", "}"],
    "description": "Public Method Definition"
  },
  "Private Method Definition": {
    "prefix": "private method",
    "body": ["private ${1:name}()", "{", "\t$0", "}"],
    "description": "Private Method Definition"
  },
  "Import external module.": {
    "prefix": "import statement",
    "body": ["import { $0 } from \"${1:module}\";"],
    "description": "Import external module."
  },
  "Property getter": {
    "prefix": "get",
    "body": ["", "public get ${1:value}() : ${2:string}", "{", "\t${3:return $0}", "}", ""],
    "description": "Property getter"
  },
  "Log to the console": {
    "prefix": "log",
    "body": ["console.log($1);", "$0"],
    "description": "Log to the console"
  },
  "Log warning to console": {
    "prefix": "warn",
    "body": ["console.warn($1);", "$0"],
    "description": "Log warning to the console"
  },
  "Log error to console": {
    "prefix": "error",
    "body": ["console.error($1);", "$0"],
    "description": "Log error to the console"
  },
  "Define a full property": {
    "prefix": "prop",
    "body": [
      "",
      "private _${1:value} : ${2:string};",
      "public get ${1:value}() : ${2:string}",
      "{",
      "\treturn this._${1:value};",
      "}",
      "public set ${1:value}(v : ${2:string})",
      "{",
      "\tthis._${1:value} = v;",
      "}",
      ""
    ],
    "description": "Define a full property"
  },
  "Triple-slash reference": {
    "prefix": "ref",
    "body": ["/// <reference path=\"$1\" />", "$0"],
    "description": "Triple-slash reference"
  },
  "Property setter": {
    "prefix": "set",
    "body": ["", "public set ${1:value}(v : ${2:string})", "{", "\tthis.$3 = v;", "}", ""],
    "description": "Property setter"
  },
  "Throw Exception": {
    "prefix": "throw",
    "body": ["throw $1;", "$0"],
    "description": "Throw Exception"
  },
  "For Loop": {
    "prefix": "for",
    "body": [
      "for (let ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++)",
      "{",
      "\tconst ${3:element} = ${2:array}[${1:index}];",
      "\t$0",
      "}"
    ],
    "description": "For Loop"
  },
  "For-Each Loop using =>": {
    "prefix": "foreach =>",
    "body": ["${1:array}.forEach(${2:element} =>", "{", "\t$0", "});"],
    "description": "For-Each Loop using =>"
  },
  "For-In Loop": {
    "prefix": "forin",
    "body": [
      "for (const ${1:key} in ${2:object})",
      "{",
      "\tif (${2:object}.hasOwnProperty(${1:key}))",
      "\t{",
      "\t\tconst ${3:element} = ${2:object}[${1:key}];",
      "\t\t$0",
      "\t}",
      "}"
    ],
    "description": "For-In Loop"
  },
  "For-Of Loop": {
    "prefix": "forof",
    "body": ["for (const ${1:iterator} of ${2:object})", "{", "\t$0", "}"],
    "description": "For-Of Loop"
  },
  "For-Await-Of Loop": {
    "prefix": "forawaitof",
    "body": ["for await (const ${1:iterator} of ${2:object})", "{", "\t$0", "}"],
    "description": "For-Await-Of Loop"
  },
  "Function Statement": {
    "prefix": "function",
    "body": ["function ${1:name}(${2:params}:${3:type})", "{", "\t$0", "}"],
    "description": "Function Statement"
  },
  "If Statement": {
    "prefix": "if",
    "body": ["if (${1:condition})", "{", "\t$0", "}"],
    "description": "If Statement"
  },
  "If-Else Statement": {
    "prefix": "ifelse",
    "body": ["if (${1:condition})", "{", "\t$0", "}", "else", "{", "\t", "}"],
    "description": "If-Else Statement"
  },
  "New Statement": {
    "prefix": "new",
    "body": ["const ${1:name} = new ${2:type}(${3:arguments});", "$0"],
    "description": "New Statement"
  },
  "Switch Statement": {
    "prefix": "switch",
    "body": [
      "switch (${1:key})",
      "{",
      "\tcase ${2:value}:",
      "\t\t$0",
      "\t\tbreak;",
      "",
      "\tdefault:",
      "\t\tbreak;",
      "}"
    ],
    "description": "Switch Statement"
  },
  "While Statement": {
    "prefix": "while",
    "body": ["while (${1:condition})", "{", "\t$0", "}"],
    "description": "While Statement"
  },
  "Do-While Statement": {
    "prefix": "dowhile",
    "body": ["do", "{", "\t$0", "} while (${1:condition});"],
    "description": "Do-While Statement"
  },
  "Try-Catch Statement": {
    "prefix": "trycatch",
    "body": ["try", "{", "\t${1:// logic}", "}", "catch (err)", "{", "\t${0:// error logic here}", "}"],
    "description": "Try-Catch Statement"
  },
  "Set Timeout Function": {
    "prefix": "settimeout",
    "body": ["setTimeout(() =>", "{", "\t$0", "}, ${1:timeout});"],
    "description": "Set Timeout Function"
  },
  "Region Start": {
    "prefix": "#region",
    "body": ["//#region $0"],
    "description": "Folding Region Start"
  },
  "Region End": {
    "prefix": "#endregion",
    "body": ["//#endregion"],
    "description": "Folding Region End"
  },
  "Eslint disable next line": {
    "prefix": ["eslint-disable"],
    "body": ["// eslint-disable-next-line"]
  },
  "Prettier ignore comment": {
    "prefix": ["prettier-ignore"],
    "body": ["// prettier-ignore"]
  }
}
